#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: 2015-12-05 10:01-0300\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: es_AR\n"
"X-Generator: Poedit 1.8.6\n"

#: ../../PyMOTW/functools/index.rst:3
msgid "functools -- Tools for Manipulating Functions"
msgstr "functools - Herramientas para la manipulación de Funciones"

#: ../../PyMOTW/functools/index.rst:8
msgid "Functions that operate on other functions."
msgstr "Funciones que operan sobre otras funciones."

#: ../../PyMOTW/functools/index.rst:9
msgid "2.5 and later"
msgstr "2.5 y posterior"

#: ../../PyMOTW/functools/index.rst:11
msgid ""
"The :mod:`functools` module provides tools for working with functions and "
"other callable objects, to adapt or extend them for new purposes without "
"completely rewriting them."
msgstr ""
"El módulo :mod:`functools` proporciona herramientas para trabajar con "
"funciones y otros objetos que se puede llamar, adaptar o extenderlas para "
"los nuevos propósitos sin tener que reescribir por completo."

#: ../../PyMOTW/functools/index.rst:16
msgid "Decorators"
msgstr "Decoradores"

#: ../../PyMOTW/functools/index.rst:18
msgid ""
"The primary tool supplied by the :mod:`functools` module is the class :"
"class:`partial`, which can be used to \"wrap\" a callable object with "
"default arguments. The resulting object is itself callable, and can be "
"treated as though it is the original function.  It takes all of the same "
"arguments as the original, and can be invoked with extra positional or "
"named arguments as well."
msgstr ""
"La principal herramienta suministrada por el módulo :mod:`functools` es la "
"clase :class:`partial`, que se puede utilizar para \"envolver\" un objeto "
"invocable con argumentos predeterminados. El objeto resultante es en sí "
"exigible, y puede ser tratado como si fuera la función original. Se "
"necesita de todos los mismos argumentos que el original, y puede ser "
"invocado con argumentos posicionales o nombradas adicionales también."

#: ../../PyMOTW/functools/index.rst:26
msgid "partial"
msgstr "parcial"

#: ../../PyMOTW/functools/index.rst:28
msgid ""
"This example shows two simple :class:`partial` objects for the function :"
"func:`myfunc`.  Notice that :func:`show_details` prints the :attr:`func`, :"
"attr:`args`, and :attr:`keywords` attributes of the partial object."
msgstr ""
"Este ejemplo muestra dos simple objetos :class:`partial` para la función :"
"func:`myfunc`. Tenga en cuenta que :func:`show_details` imprime los "
"atributos :attr:` func`,: attr: `args` y :attr:`keywords` del objeto "
"parcial."

#: ../../PyMOTW/functools/index.rst:37
msgid ""
"At the end of the example, the first :class:`partial` created is invoked "
"without passing a value for *a*, causing an exception."
msgstr ""
"Al final del ejemplo, el primero :class: `partial` creado se invoca sin "
"pasar un valor para *a*, causando una excepción."

#: ../../PyMOTW/functools/index.rst:80
msgid "update_wrapper"
msgstr "update_wrapper"

#: ../../PyMOTW/functools/index.rst:82
msgid ""
"The partial object does not have :attr:`__name__` or :attr:`__doc__` "
"attributes by default, and without those attributes decorated functions are "
"more difficult to debug. Using :func:`update_wrapper`, copies or adds "
"attributes from the original function to the :class:`partial` object."
msgstr ""
"El objeto parcial no tiene atributos :attr: `__name__` o :attr:` __doc__` "
"por defecto, y sin esos atributos decoradores las funciones son más "
"difíciles de depurar. Usando :func:`update_wrapper`, copias o añades "
"atributos de la función original al objeto de la :class:`partial`."

#: ../../PyMOTW/functools/index.rst:92
msgid ""
"The attributes added to the wrapper are defined in :const:`functools."
"WRAPPER_ASSIGNMENTS`, while :const:`functools.WRAPPER_UPDATES` lists values "
"to be modified."
msgstr ""
"Los atributos añadidos a la envoltura se definen en :const: `functools."
"WRAPPER_ASSIGNMENTS`, mientras que :const:` functools.WRAPPER_UPDATES` "
"enumera los valores a ser modificados."

#: ../../PyMOTW/functools/index.rst:128
msgid "Other Callables"
msgstr "Otras llamadas"

#: ../../PyMOTW/functools/index.rst:130
msgid "Partials work with any callable object, not just standalone functions."
msgstr ""
"Parciales funcionan con cualquier objeto exigible, no sólo a las funciones "
"independientes."

#: ../../PyMOTW/functools/index.rst:136
msgid ""
"This example creates partials from an instance, and methods of an instance."
msgstr ""
"Este ejemplo crea parciales de una instancia, y los métodos de una "
"instancia."

#: ../../PyMOTW/functools/index.rst:195
msgid "wraps"
msgstr "envoltura"

#: ../../PyMOTW/functools/index.rst:197
msgid ""
"Updating the properties of a wrapped callable is especially useful when "
"used in a decorator, since the transformed function ends up with properties "
"of the original, \"bare\", function."
msgstr ""
"Actualizando las propiedades de un envoltorio invocable es especialmente "
"útil cuando se utiliza en un decorador, ya que la función transformado "
"termina con propiedades de la \"desnudo\", función original."

#: ../../PyMOTW/functools/index.rst:205
msgid ""
":mod:`functools` provides a decorator, :func:`wraps`, which applies :func:"
"`update_wrapper` to the decorated function."
msgstr ""
":mod:`functools` ofrece un decorador, :func:` wraps`, que se aplica :func: "
"`update_wrapper` a la función decorada."

#: ../../PyMOTW/functools/index.rst:247
msgid "Comparison"
msgstr "Comparación"

#: ../../PyMOTW/functools/index.rst:249
msgid ""
"Under Python 2, classes can define a :func:`__cmp__` method that returns "
"``-1``, ``0``, or ``1`` based on whether the object is less than, equal to, "
"or greater than the item being compared.  Python 2.1 introduces the *rich "
"comparison* methods API, :func:`__lt__`, :func:`__le__`, :func:`__eq__`, :"
"func:`__ne__`, :func:`__gt__`, and :func:`__ge__`, which perform a single "
"comparison operation and return a boolean value.  Python 3 deprecated :func:"
"`__cmp__` in favor of these new methods, so :mod:`functools` provides tools "
"to make it easier to write Python 2 classes that comply with the new "
"comparison requirements in Python 3."
msgstr ""
"En Python 2, las clases pueden definir un método :func: `__cmp__` que "
"devuelve` `-1``,` `0``, o` `1`` en función de si el objeto es menor, igual "
"o mayor que el elemento que se comparan. Python 2.1 introduce el método de "
"API *rich comparison*, :func: `__lt__`,:func:` __le__`, :func: `__eq__`, :"
"func:` __ne__`, :func: `__gt__` y :func: `__ge__`, que realizan una única "
"operación de comparación y devuelve un valor booleano. Python 3 puso en "
"desuso :func:`__cmp__` a favor de estos nuevos métodos, por lo que :mod:` "
"functools` proporciona herramientas para hacer más fácil escribir clases en "
"Python 2  que cumplan con los nuevos requisitos de comparación en Python 3."

#: ../../PyMOTW/functools/index.rst:261
msgid "Rich Comparison"
msgstr "Comparación rica"

#: ../../PyMOTW/functools/index.rst:263
msgid ""
"The rich comparison API is designed to allow classes with complex "
"comparisons to implement each test in the most efficient way possible. "
"However, for classes where comparison is relatively simple, there is no "
"point in manually creating each of the rich comparison methods. The :func:"
"`total_ordering` class decorator takes a class that provides some of the "
"methods, and adds the rest of them."
msgstr ""
"La API de comparación rica esta diseñada para permitir a las clases con "
"comparaciones complejas para implementar cada prueba de la manera mas "
"eficiente posible. Sin embargo, para las clases en que la comparación es "
"relativamente simple, no hay ningún punto en la creación manual de cada uno "
"de los métodos de comparación ricos. La clase decorador :func: "
"`total_ordering` toma una clase que proporciona algunos de los métodos, y "
"añade el resto de ellos."

#: ../../PyMOTW/functools/index.rst:274
msgid ""
"The class must provide an implmentation of :func:`__eq__` and any one of "
"the other rich comparison methods.  The decorator adds implementations of "
"the other methods that work by using the comparisons provided."
msgstr ""
"La clase debe proporcionar una implementación de :func: `__eq__` y uno "
"cualquiera de los otros métodos de comparación ricos. El decorador añade "
"implementaciones de los otros métodos que funcionan mediante el uso de las "
"comparaciones previstas."

#: ../../PyMOTW/functools/index.rst:323
msgid "Collation Order"
msgstr "Colación Orden"

#: ../../PyMOTW/functools/index.rst:325
msgid ""
"Since old-style comparison functions are deprecated in Python 3, the :data:"
"`cmp` argument to functions like :func:`sort` are also no longer "
"supported.  Python 2 programs that use comparison functions can use :func:"
"`cmp_to_key` to convert them to a function that returns a *collation key*, "
"which is used to determine the position in the final sequence."
msgstr ""
"Desde funciones de comparación de estilo antiguo están en desuso en Python "
"3, el argumento :data: `cmp` a funciones como :func:` sort` también ya no "
"son compatibles. Programas Python 2 que utilizan funciones de comparación "
"se puede utilizar :func: `cmp_to_key` convertirlos a una función que "
"devuelve una *clave cotejo *, que se utiliza para determinar la posición en "
"la secuencia final."

#: ../../PyMOTW/functools/index.rst:338
msgid ""
"Normally :func:`cmp_to_key` would be used directly, but in this example an "
"extra wrapper function is introduced to print out more information as the "
"key function is being called."
msgstr ""
"Normalmente :func:`cmp_to_key` sería utilizado directamente, pero en este "
"ejemplo se introduce una función de contenedor extra para imprimir más "
"información que la función de la tecla se está llamando."

#: ../../PyMOTW/functools/index.rst:342
msgid ""
"The output shows that :func:`sorted` starts by calling :func:"
"`get_key_wrapper` for each item in the sequence to produce a key.  The keys "
"returned by :func:`cmp_to_key` are instances of a class defined in :mod:"
"`functools` that implements the rich comparison API based on the return "
"value of the provided old-style comparison function.  After all of the keys "
"are created, the sequence is sorted by comparing the keys."
msgstr ""
"El resultado muestra que :func: `sorted` comienza llamando al :func:` "
"get_key_wrapper` para cada elemento de la secuencia para producir una "
"clave. Las claves devueltas por :func: `cmp_to_key` son instancias de una "
"clase definida en :mod:` functools` que implementa las API de ricos "
"comparación basada en el valor de retorno de la función de comparación de "
"estilo antiguo proporcionado. Después de todas las llaves se crean, la "
"secuencia se ordena mediante la comparación de las llaves."

#: ../../PyMOTW/functools/index.rst:380
msgid "`functools <http://docs.python.org/library/functools.html>`_"
msgstr "`functools <http://docs.python.org/library/functools.html>`_"

#: ../../PyMOTW/functools/index.rst:380
msgid "The standard library documentation for this module."
msgstr "La documentación de la biblioteca estándar para este módulo."

#: ../../PyMOTW/functools/index.rst:382
msgid ""
"`Rich comparison methods <http://docs.python.org/reference/datamodel."
"html#object.__lt__>`__"
msgstr ""
"`Métodos de rica comparación <http://docs.python.org/reference/datamodel."
"html#object.__lt__>`__"

#: ../../PyMOTW/functools/index.rst:383
msgid ""
"Description of the rich comparison methods from the Python Reference Guide."
msgstr ""
"Descripción de los métodos de comparación ricos de la Guía de referencia de "
"Python."
